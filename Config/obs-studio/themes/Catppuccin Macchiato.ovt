@OBSThemeMeta {
    name: 'Macchiato';
    id: 'com.obsproject.Catppuccin.Macchiato';
    extends: 'com.obsproject.Catppuccin';
    author: 'Xurdejl';
    dark: 'true';
}

@OBSThemeVars {
    --ctp_rosewater: #f4dbd6;
    --ctp_flamingo: #f0c6c6;
    --ctp_pink: #f5bde6;
    --ctp_mauve: #c6a0f6;
    --ctp_red: #ed8796;
    --ctp_maroon: #ee99a0;
    --ctp_peach: #f5a97f;
    --ctp_yellow: #eed49f;
    --ctp_green: #a6da95;
    --ctp_teal: #8bd5ca;
    --ctp_sky: #91d7e3;
    --ctp_sapphire: #7dc4e4;
    --ctp_blue: #8aadf4;
    --ctp_lavender: #b7bdf8;
    --ctp_text: #cad3f5;
    --ctp_subtext1: #b8c0e0;
    --ctp_subtext0: #a5adcb;
    --ctp_overlay2: #939ab7;
    --ctp_overlay1: #8087a2;
    --ctp_overlay0: #6e738d;
    --ctp_surface2: #5b6078;
    --ctp_surface1: #494d64;
    --ctp_surface0: #363a4f;
    --ctp_base: #24273a;
    --ctp_mantle: #1e2030;
    --ctp_crust: #181926;
}

VolumeMeter {
    qproperty-foregroundNominalColor: rgb(109, 194, 81);
    qproperty-foregroundWarningColor: rgb(238, 111, 41);
    qproperty-foregroundErrorColor: rgb(225, 54, 79);

    qproperty-magnitudeColor: rgb(49, 50, 8);
}

/* Context Menu */
QMenu::right-arrow {
    image: url(theme:Dark/expand.svg);
}

/* Dock Widget */
QDockWidget {
    titlebar-close-icon: url(theme:Dark/close.svg);
    titlebar-normal-icon: url(theme:Dark/popout.svg);
}

/* Source Context Bar */
QPushButton#sourcePropertiesButton {
    qproperty-icon: url(theme:Dark/settings/general.svg);
}

QPushButton#sourceFiltersButton {
    qproperty-icon: url(theme:Dark/filter.svg);
}

/* Scenes and Sources toolbar */
* [themeID="addIconSmall"] {
    qproperty-icon: url(theme:Dark/plus.svg);
}

* [themeID="removeIconSmall"] {
    qproperty-icon: url(theme:Dark/trash.svg);
}

* [themeID="clearIconSmall"] {
    qproperty-icon: url(theme:Dark/entry-clear.svg);
}

* [themeID="propertiesIconSmall"] {
    qproperty-icon: url(theme:Dark/settings/general.svg);
}

* [themeID="configIconSmall"] {
    qproperty-icon: url(theme:Dark/settings/general.svg);
}

* [themeID="menuIconSmall"] {
    qproperty-icon: url(theme:Dark/dots-vert.svg);
}

* [themeID="refreshIconSmall"] {
    qproperty-icon: url(theme:Dark/refresh.svg);
}

* [themeID="cogsIcon"] {
    qproperty-icon: url(theme:Dark/cogs.svg);
}

#sourceInteractButton {
    qproperty-icon: url(theme:Dark/interact.svg);
}

* [themeID="upArrowIconSmall"] {
    qproperty-icon: url(theme:Dark/up.svg);
}

* [themeID="downArrowIconSmall"] {
    qproperty-icon: url(theme:Dark/down.svg);
}

* [themeID="pauseIconSmall"] {
    qproperty-icon: url(theme:Dark/media-pause.svg);
}

* [themeID="filtersIcon"] {
    qproperty-icon: url(theme:Dark/filter.svg);
}

QToolBarExtension {
    qproperty-icon: url(theme:Dark/dots-vert.svg);
}

/* ComboBox */
QComboBox::down-arrow,
QDateTimeEdit::down-arrow {
    image: url(theme:Dark/collapse.svg);
}

QComboBox::down-arrow:editable,
QDateTimeEdit::down-arrow:editable {
    image: url(theme:Dark/down.svg);
}

/* Spinbox and doubleSpinbox */
QSpinBox::up-arrow,
QDoubleSpinBox::up-arrow {
    image: url(theme:Dark/up.svg);
}

QSpinBox::down-arrow,
QDoubleSpinBox::down-arrow {
    image: url(theme:Dark/down.svg);
}

/* Buttons */
QPushButton::menu-indicator {
    image: url(theme:Dark/down.svg);
}

/* Settings Icons */
OBSBasicSettings {
    qproperty-generalIcon: url(theme:Dark/settings/general.svg);
    qproperty-appearanceIcon: url(theme:Dark/settings/appearance.svg);
    qproperty-streamIcon: url(theme:Dark/settings/stream.svg);
    qproperty-outputIcon: url(theme:Dark/settings/output.svg);
    qproperty-audioIcon: url(theme:Dark/settings/audio.svg);
    qproperty-videoIcon: url(theme:Dark/settings/video.svg);
    qproperty-hotkeysIcon: url(theme:Dark/settings/hotkeys.svg);
    qproperty-accessibilityIcon: url(theme:Dark/settings/accessibility.svg);
    qproperty-advancedIcon: url(theme:Dark/settings/advanced.svg);
}

/* Checkboxes */
QCheckBox::indicator:unchecked,
QGroupBox::indicator:unchecked {
    image: url(theme:Yami/checkbox_unchecked.svg);
}

QCheckBox::indicator:unchecked:hover,
QGroupBox::indicator:unchecked:hover {
    border: none;
    image: url(theme:Yami/checkbox_unchecked_focus.svg);
}

QCheckBox::indicator:checked,
QGroupBox::indicator:checked {
    image: url(theme:Yami/checkbox_checked.svg);
}

QCheckBox::indicator:checked:hover,
QGroupBox::indicator:checked:hover {
    image: url(theme:Yami/checkbox_checked_focus.svg);
}

QCheckBox::indicator:checked:disabled,
QGroupBox::indicator:checked:disabled {
    image: url(theme:Yami/checkbox_checked_disabled.svg);
}

/* Locked CheckBox */
QCheckBox[lockCheckBox=true]::indicator:checked,
QCheckBox[lockCheckBox=true]::indicator:checked:hover {
    image: url(theme:Dark/locked.svg);
}

/* Visibility CheckBox */
QCheckBox[visibilityCheckBox=true]::indicator:checked,
QCheckBox[visibilityCheckBox=true]::indicator:checked:hover {
    image: url(theme:Dark/visible.svg);
}

* [themeID="revertIcon"] {
    qproperty-icon: url(theme:Dark/revert.svg);
}

/* Mute CheckBox */
MuteCheckBox::indicator:checked {
    image: url(theme:Dark/mute.svg);
}

MuteCheckBox::indicator:indeterminate {
    image: url(theme:Dark/unassigned.svg);
}

MuteCheckBox::indicator:unchecked {
    image: url(theme:Dark/settings/audio.svg);
}

MuteCheckBox::indicator:unchecked:hover {
    image: url(theme:Dark/settings/audio.svg);
}

MuteCheckBox::indicator:unchecked:focus {
    image: url(theme:Dark/settings/audio.svg);
}

MuteCheckBox::indicator:checked:hover {
    image: url(theme:Dark/mute.svg);
}

MuteCheckBox::indicator:checked:focus {
    image: url(theme:Dark/mute.svg);
}

MuteCheckBox::indicator:checked:disabled {
    image: url(theme:Dark/mute.svg);
}

MuteCheckBox::indicator:unchecked:disabled {
    image: url(theme:Dark/settings/audio.svg);
}

/* Sources List Group Collapse Checkbox */
QCheckBox[sourceTreeSubItem=true]::indicator:checked,
QCheckBox[sourceTreeSubItem=true]::indicator:checked:hover {
    image: url(theme:Dark/expand.svg);
}

QCheckBox[sourceTreeSubItem=true]::indicator:unchecked,
QCheckBox[sourceTreeSubItem=true]::indicator:unchecked:hover {
    image: url(theme:Dark/collapse.svg);
}

/* Source Icons */
OBSBasic {
    qproperty-imageIcon: url(theme:Dark/sources/image.svg);
    qproperty-colorIcon: url(theme:Dark/sources/brush.svg);
    qproperty-slideshowIcon: url(theme:Dark/sources/slideshow.svg);
    qproperty-audioInputIcon: url(theme:Dark/sources/microphone.svg);
    qproperty-audioOutputIcon: url(theme:Dark/settings/audio.svg);
    qproperty-desktopCapIcon: url(theme:Dark/settings/video.svg);
    qproperty-windowCapIcon: url(theme:Dark/sources/window.svg);
    qproperty-gameCapIcon: url(theme:Dark/sources/gamepad.svg);
    qproperty-cameraIcon: url(theme:Dark/sources/camera.svg);
    qproperty-textIcon: url(theme:Dark/sources/text.svg);
    qproperty-mediaIcon: url(theme:Dark/sources/media.svg);
    qproperty-browserIcon: url(theme:Dark/sources/globe.svg);
    qproperty-groupIcon: url(theme:Dark/sources/group.svg);
    qproperty-sceneIcon: url(theme:Dark/sources/scene.svg);
    qproperty-defaultIcon: url(theme:Dark/sources/default.svg);
    qproperty-audioProcessOutputIcon: url(theme:Dark/sources/windowaudio.svg);
}

/* Save icon */
* [themeID="replayIconSmall"] {
    qproperty-icon: url(theme:Dark/save.svg);
}

/* Media icons */
* [themeID="playIcon"] {
    qproperty-icon: url(theme:Dark/media/media_play.svg);
}

* [themeID="pauseIcon"] {
    qproperty-icon: url(theme:Dark/media/media_pause.svg);
}

* [themeID="restartIcon"] {
    qproperty-icon: url(theme:Dark/media/media_restart.svg);
}

* [themeID="stopIcon"] {
    qproperty-icon: url(theme:Dark/media/media_stop.svg);
}

* [themeID="nextIcon"] {
    qproperty-icon: url(theme:Dark/media/media_next.svg);
}

* [themeID="previousIcon"] {
    qproperty-icon: url(theme:Dark/media/media_previous.svg);
}

/* YouTube Integration */
OBSYoutubeActions {
    qproperty-thumbPlaceholder: url(theme:Dark/sources/image.svg);
}

/* Calendar Widget */
QDateTimeEdit::down-arrow {
    image: url(theme:Dark/down.svg);
}

/* Calendar Top Bar Buttons */
#qt_calendar_monthbutton::menu-indicator {
    image: url(theme:Dark/down.svg);
}

QCalendarWidget #qt_calendar_prevmonth {
    qproperty-icon: url(theme:Dark/left.svg);
}

QCalendarWidget #qt_calendar_nextmonth {
    qproperty-icon: url(theme:Dark/right.svg);
}
